//
// StudentIDActivity.java
// LG CATS
//
// Developers: Shomil Jain, Cassandra Melax, Quintin Leary, and Harry Wang
// Copyright Â© 2017 Los Gatos High School. All rights reserved.
//
// StudentIDActivity - generates barcode for student
//

package com.sjf.lgcats;

import java.util.EnumMap;
import java.util.Map;
import android.content.DialogInterface;
import android.content.SharedPreferences;
import android.graphics.Bitmap;
import android.os.Bundle;
import android.support.v7.app.AlertDialog;
import android.support.v7.app.AppCompatActivity;
import android.support.v7.widget.Toolbar;
import android.widget.ImageView;
import android.widget.TextView;
import com.google.zxing.BarcodeFormat;
import com.google.zxing.EncodeHintType;
import com.google.zxing.MultiFormatWriter;
import com.google.zxing.WriterException;
import com.google.zxing.common.BitMatrix;

public class StudentIDActivity extends AppCompatActivity {

    private ImageView mImageView;
    private TextView mNameTextView;
    private TextView mIDTextView;

    // pre: none
    // post: sets up view, creates barcode
    @Override
    protected void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setupView();
        assignVariables();
        checkIfStudent();
    }

    // pre: none
    // post: if user is student, then creates barcode
    private void checkIfStudent() {
        SharedPreferences prefs = getSharedPreferences(getString(R.string.shared_prefs), MODE_PRIVATE);
        if (UserUtils.isStudent(prefs) && UserUtils.getUsername(prefs) != null) {
            displayBarcode(UserUtils.getUsername(prefs));
        } else {
            AlertDialog.Builder builder = new AlertDialog.Builder(this);
            builder.setMessage("Please sign in as a student to access your Student ID.")
                    .setCancelable(false)
                    .setPositiveButton("OK", new DialogInterface.OnClickListener() {
                        public void onClick(DialogInterface dialog, int id) {
                            finish();
                        }
                    });
            AlertDialog alert = builder.create();
            alert.show();
        }
    }

    // pre: none
    // post: displays barcode on screen
    private void displayBarcode(String id) {
        StudentList sList = new StudentList(getApplicationContext());
        Student me = sList.getStudent(id);
        if (me != null) {
            mIDTextView.setText(me.getId());
            mNameTextView.setText(me.getFull());
        }
        String barcode_data = "P " + id;
        Bitmap bitmap;
        try {
            bitmap = encodeAsBitmap(barcode_data, BarcodeFormat.CODE_39, 324, 46);
            mImageView.setImageBitmap(bitmap);
        } catch (WriterException e) {
            e.printStackTrace();
        }
    }

    // pre: none
    // post: initializes variables
    private void assignVariables() {
        mImageView = (ImageView) (findViewById(R.id.student_id_image_view));
        mIDTextView = (TextView) (findViewById(R.id.student_id_number_text_view));
        mNameTextView = (TextView) (findViewById(R.id.student_id_name_text_view));
    }

    // pre: none
    // post: sets up the view
    private void setupView() {
        setContentView(R.layout.activity_student_id);
        Toolbar toolbar = (Toolbar) findViewById(R.id.toolbar);
        setSupportActionBar(toolbar);
        setTitle("Student ID");
    }

    // MARK: all code from here to end of file is auto-generated by the API

    private static final int WHITE = 0xFFFFFFFF;
    private static final int BLACK = 0xFF000000;

    Bitmap encodeAsBitmap(String contents, BarcodeFormat format, int img_width, int img_height) throws WriterException {
        String contentsToEncode = contents;
        if (contentsToEncode == null) {
            return null;
        }
        Map<EncodeHintType, Object> hints = null;
        String encoding = guessAppropriateEncoding(contentsToEncode);
        if (encoding != null) {
            hints = new EnumMap<EncodeHintType, Object>(EncodeHintType.class);
            hints.put(EncodeHintType.CHARACTER_SET, encoding);
        }
        MultiFormatWriter writer = new MultiFormatWriter();
        BitMatrix result;
        try {
            result = writer.encode(contentsToEncode, format, img_width, img_height, hints);
        } catch (IllegalArgumentException iae) {
            // Unsupported format
            return null;
        }
        int width = result.getWidth();
        int height = result.getHeight();
        int[] pixels = new int[width * height];
        for (int y = 0; y < height; y++) {
            int offset = y * width;
            for (int x = 0; x < width; x++) {
                pixels[offset + x] = result.get(x, y) ? BLACK : WHITE;
            }
        }

        Bitmap bitmap = Bitmap.createBitmap(width, height,
                Bitmap.Config.ARGB_8888);
        bitmap.setPixels(pixels, 0, width, 0, 0, width, height);
        return bitmap;
    }

    private static String guessAppropriateEncoding(CharSequence contents) {
        // Very crude at the moment
        for (int i = 0; i < contents.length(); i++) {
            if (contents.charAt(i) > 0xFF) {
                return "UTF-8";
            }
        }
        return null;
    }

}
